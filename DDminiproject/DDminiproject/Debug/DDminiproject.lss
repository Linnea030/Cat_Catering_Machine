
DDminiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000bf4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016ff  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085c  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd0  00000000  00000000  00002db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00003b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000119e  00000000  00000000  000042d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000546f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	da 03       	fmulsu	r21, r18
  6a:	e6 03       	fmuls	r22, r22
  6c:	f2 03       	fmuls	r23, r18
  6e:	fe 03       	fmulsu	r23, r22
  70:	0a 04       	cpc	r0, r10
  72:	16 04       	cpc	r1, r6
  74:	22 04       	cpc	r2, r2

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e4 ef       	ldi	r30, 0xF4	; 244
  8a:	fb e0       	ldi	r31, 0x0B	; 11
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 39       	cpi	r26, 0x90	; 144
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>
  98:	0e 94 3f 03 	call	0x67e	; 0x67e <main>
  9c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <pinChange>:
		while((TIFR0 & 0x1)==0); //wait
		TCCR0B=0;//stop timer0
		TIFR0=0x01; //clear tov0 flag
		i=i+1;
	}
}
  a4:	67 2b       	or	r22, r23
  a6:	09 f0       	breq	.+2      	; 0xaa <pinChange+0x6>
  a8:	a1 c0       	rjmp	.+322    	; 0x1ec <pinChange+0x148>
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	91 05       	cpc	r25, r1
  ae:	21 f4       	brne	.+8      	; 0xb8 <pinChange+0x14>
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret
  b8:	8b 30       	cpi	r24, 0x0B	; 11
  ba:	91 05       	cpc	r25, r1
  bc:	21 f4       	brne	.+8      	; 0xc6 <pinChange+0x22>
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	08 95       	ret
  c6:	8c 30       	cpi	r24, 0x0C	; 12
  c8:	91 05       	cpc	r25, r1
  ca:	21 f4       	brne	.+8      	; 0xd4 <pinChange+0x30>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	08 95       	ret
  d4:	8d 30       	cpi	r24, 0x0D	; 13
  d6:	91 05       	cpc	r25, r1
  d8:	21 f4       	brne	.+8      	; 0xe2 <pinChange+0x3e>
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret
  e2:	8e 30       	cpi	r24, 0x0E	; 14
  e4:	91 05       	cpc	r25, r1
  e6:	21 f4       	brne	.+8      	; 0xf0 <pinChange+0x4c>
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret
  f0:	8f 30       	cpi	r24, 0x0F	; 15
  f2:	91 05       	cpc	r25, r1
  f4:	21 f4       	brne	.+8      	; 0xfe <pinChange+0x5a>
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	91 05       	cpc	r25, r1
 102:	21 f4       	brne	.+8      	; 0x10c <pinChange+0x68>
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	85 b9       	out	0x05, r24	; 5
 10a:	08 95       	ret
 10c:	81 31       	cpi	r24, 0x11	; 17
 10e:	91 05       	cpc	r25, r1
 110:	21 f4       	brne	.+8      	; 0x11a <pinChange+0x76>
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	85 b9       	out	0x05, r24	; 5
 118:	08 95       	ret
 11a:	84 31       	cpi	r24, 0x14	; 20
 11c:	91 05       	cpc	r25, r1
 11e:	21 f4       	brne	.+8      	; 0x128 <pinChange+0x84>
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	88 b9       	out	0x08, r24	; 8
 126:	08 95       	ret
 128:	85 31       	cpi	r24, 0x15	; 21
 12a:	91 05       	cpc	r25, r1
 12c:	21 f4       	brne	.+8      	; 0x136 <pinChange+0x92>
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	88 b9       	out	0x08, r24	; 8
 134:	08 95       	ret
 136:	86 31       	cpi	r24, 0x16	; 22
 138:	91 05       	cpc	r25, r1
 13a:	21 f4       	brne	.+8      	; 0x144 <pinChange+0xa0>
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
 144:	87 31       	cpi	r24, 0x17	; 23
 146:	91 05       	cpc	r25, r1
 148:	21 f4       	brne	.+8      	; 0x152 <pinChange+0xae>
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	88 b9       	out	0x08, r24	; 8
 150:	08 95       	ret
 152:	88 31       	cpi	r24, 0x18	; 24
 154:	91 05       	cpc	r25, r1
 156:	21 f4       	brne	.+8      	; 0x160 <pinChange+0xbc>
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8f 7e       	andi	r24, 0xEF	; 239
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	08 95       	ret
 160:	89 31       	cpi	r24, 0x19	; 25
 162:	91 05       	cpc	r25, r1
 164:	21 f4       	brne	.+8      	; 0x16e <pinChange+0xca>
 166:	88 b1       	in	r24, 0x08	; 8
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	08 95       	ret
 16e:	8a 31       	cpi	r24, 0x1A	; 26
 170:	91 05       	cpc	r25, r1
 172:	21 f4       	brne	.+8      	; 0x17c <pinChange+0xd8>
 174:	88 b1       	in	r24, 0x08	; 8
 176:	8f 7b       	andi	r24, 0xBF	; 191
 178:	88 b9       	out	0x08, r24	; 8
 17a:	08 95       	ret
 17c:	8e 31       	cpi	r24, 0x1E	; 30
 17e:	91 05       	cpc	r25, r1
 180:	21 f4       	brne	.+8      	; 0x18a <pinChange+0xe6>
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret
 18a:	8f 31       	cpi	r24, 0x1F	; 31
 18c:	91 05       	cpc	r25, r1
 18e:	21 f4       	brne	.+8      	; 0x198 <pinChange+0xf4>
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	8b b9       	out	0x0b, r24	; 11
 196:	08 95       	ret
 198:	80 32       	cpi	r24, 0x20	; 32
 19a:	91 05       	cpc	r25, r1
 19c:	21 f4       	brne	.+8      	; 0x1a6 <pinChange+0x102>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	08 95       	ret
 1a6:	81 32       	cpi	r24, 0x21	; 33
 1a8:	91 05       	cpc	r25, r1
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <pinChange+0x110>
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	08 95       	ret
 1b4:	82 32       	cpi	r24, 0x22	; 34
 1b6:	91 05       	cpc	r25, r1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <pinChange+0x11e>
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	08 95       	ret
 1c2:	83 32       	cpi	r24, 0x23	; 35
 1c4:	91 05       	cpc	r25, r1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <pinChange+0x12c>
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	08 95       	ret
 1d0:	84 32       	cpi	r24, 0x24	; 36
 1d2:	91 05       	cpc	r25, r1
 1d4:	21 f4       	brne	.+8      	; 0x1de <pinChange+0x13a>
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	08 95       	ret
 1de:	85 97       	sbiw	r24, 0x25	; 37
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <pinChange+0x140>
 1e2:	a3 c0       	rjmp	.+326    	; 0x32a <pinChange+0x286>
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8f 77       	andi	r24, 0x7F	; 127
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	08 95       	ret
 1ec:	8a 30       	cpi	r24, 0x0A	; 10
 1ee:	91 05       	cpc	r25, r1
 1f0:	21 f4       	brne	.+8      	; 0x1fa <pinChange+0x156>
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	08 95       	ret
 1fa:	8b 30       	cpi	r24, 0x0B	; 11
 1fc:	91 05       	cpc	r25, r1
 1fe:	21 f4       	brne	.+8      	; 0x208 <pinChange+0x164>
 200:	85 b1       	in	r24, 0x05	; 5
 202:	82 60       	ori	r24, 0x02	; 2
 204:	85 b9       	out	0x05, r24	; 5
 206:	08 95       	ret
 208:	8c 30       	cpi	r24, 0x0C	; 12
 20a:	91 05       	cpc	r25, r1
 20c:	21 f4       	brne	.+8      	; 0x216 <pinChange+0x172>
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	84 60       	ori	r24, 0x04	; 4
 212:	85 b9       	out	0x05, r24	; 5
 214:	08 95       	ret
 216:	8d 30       	cpi	r24, 0x0D	; 13
 218:	91 05       	cpc	r25, r1
 21a:	21 f4       	brne	.+8      	; 0x224 <pinChange+0x180>
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	88 60       	ori	r24, 0x08	; 8
 220:	85 b9       	out	0x05, r24	; 5
 222:	08 95       	ret
 224:	8e 30       	cpi	r24, 0x0E	; 14
 226:	91 05       	cpc	r25, r1
 228:	21 f4       	brne	.+8      	; 0x232 <pinChange+0x18e>
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	85 b9       	out	0x05, r24	; 5
 230:	08 95       	ret
 232:	8f 30       	cpi	r24, 0x0F	; 15
 234:	91 05       	cpc	r25, r1
 236:	21 f4       	brne	.+8      	; 0x240 <pinChange+0x19c>
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret
 240:	80 31       	cpi	r24, 0x10	; 16
 242:	91 05       	cpc	r25, r1
 244:	21 f4       	brne	.+8      	; 0x24e <pinChange+0x1aa>
 246:	85 b1       	in	r24, 0x05	; 5
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	08 95       	ret
 24e:	81 31       	cpi	r24, 0x11	; 17
 250:	91 05       	cpc	r25, r1
 252:	21 f4       	brne	.+8      	; 0x25c <pinChange+0x1b8>
 254:	85 b1       	in	r24, 0x05	; 5
 256:	80 68       	ori	r24, 0x80	; 128
 258:	85 b9       	out	0x05, r24	; 5
 25a:	08 95       	ret
 25c:	84 31       	cpi	r24, 0x14	; 20
 25e:	91 05       	cpc	r25, r1
 260:	21 f4       	brne	.+8      	; 0x26a <pinChange+0x1c6>
 262:	88 b1       	in	r24, 0x08	; 8
 264:	81 60       	ori	r24, 0x01	; 1
 266:	88 b9       	out	0x08, r24	; 8
 268:	08 95       	ret
 26a:	85 31       	cpi	r24, 0x15	; 21
 26c:	91 05       	cpc	r25, r1
 26e:	21 f4       	brne	.+8      	; 0x278 <pinChange+0x1d4>
 270:	88 b1       	in	r24, 0x08	; 8
 272:	82 60       	ori	r24, 0x02	; 2
 274:	88 b9       	out	0x08, r24	; 8
 276:	08 95       	ret
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	91 05       	cpc	r25, r1
 27c:	21 f4       	brne	.+8      	; 0x286 <pinChange+0x1e2>
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	84 60       	ori	r24, 0x04	; 4
 282:	88 b9       	out	0x08, r24	; 8
 284:	08 95       	ret
 286:	87 31       	cpi	r24, 0x17	; 23
 288:	91 05       	cpc	r25, r1
 28a:	21 f4       	brne	.+8      	; 0x294 <pinChange+0x1f0>
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	88 b9       	out	0x08, r24	; 8
 292:	08 95       	ret
 294:	88 31       	cpi	r24, 0x18	; 24
 296:	91 05       	cpc	r25, r1
 298:	21 f4       	brne	.+8      	; 0x2a2 <pinChange+0x1fe>
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	08 95       	ret
 2a2:	89 31       	cpi	r24, 0x19	; 25
 2a4:	91 05       	cpc	r25, r1
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <pinChange+0x20c>
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	88 b9       	out	0x08, r24	; 8
 2ae:	08 95       	ret
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	21 f4       	brne	.+8      	; 0x2be <pinChange+0x21a>
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	88 b9       	out	0x08, r24	; 8
 2bc:	08 95       	ret
 2be:	8e 31       	cpi	r24, 0x1E	; 30
 2c0:	91 05       	cpc	r25, r1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <pinChange+0x228>
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	08 95       	ret
 2cc:	8f 31       	cpi	r24, 0x1F	; 31
 2ce:	91 05       	cpc	r25, r1
 2d0:	21 f4       	brne	.+8      	; 0x2da <pinChange+0x236>
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	08 95       	ret
 2da:	80 32       	cpi	r24, 0x20	; 32
 2dc:	91 05       	cpc	r25, r1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <pinChange+0x244>
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	8b b9       	out	0x0b, r24	; 11
 2e6:	08 95       	ret
 2e8:	81 32       	cpi	r24, 0x21	; 33
 2ea:	91 05       	cpc	r25, r1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <pinChange+0x252>
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	88 60       	ori	r24, 0x08	; 8
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	08 95       	ret
 2f6:	82 32       	cpi	r24, 0x22	; 34
 2f8:	91 05       	cpc	r25, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <pinChange+0x260>
 2fc:	8b b1       	in	r24, 0x0b	; 11
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	8b b9       	out	0x0b, r24	; 11
 302:	08 95       	ret
 304:	83 32       	cpi	r24, 0x23	; 35
 306:	91 05       	cpc	r25, r1
 308:	21 f4       	brne	.+8      	; 0x312 <pinChange+0x26e>
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	8b b9       	out	0x0b, r24	; 11
 310:	08 95       	ret
 312:	84 32       	cpi	r24, 0x24	; 36
 314:	91 05       	cpc	r25, r1
 316:	21 f4       	brne	.+8      	; 0x320 <pinChange+0x27c>
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	08 95       	ret
 320:	85 97       	sbiw	r24, 0x25	; 37
 322:	19 f4       	brne	.+6      	; 0x32a <pinChange+0x286>
 324:	8b b1       	in	r24, 0x0b	; 11
 326:	80 68       	ori	r24, 0x80	; 128
 328:	8b b9       	out	0x0b, r24	; 11
 32a:	08 95       	ret

0000032c <Lcd4_Port>:
 32c:	cf 93       	push	r28
 32e:	c8 2f       	mov	r28, r24
 330:	80 ff       	sbrs	r24, 0
 332:	07 c0       	rjmp	.+14     	; 0x342 <Lcd4_Port+0x16>
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	82 e2       	ldi	r24, 0x22	; 34
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 340:	06 c0       	rjmp	.+12     	; 0x34e <Lcd4_Port+0x22>
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	82 e2       	ldi	r24, 0x22	; 34
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 34e:	c1 ff       	sbrs	r28, 1
 350:	07 c0       	rjmp	.+14     	; 0x360 <Lcd4_Port+0x34>
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	83 e2       	ldi	r24, 0x23	; 35
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 35e:	06 c0       	rjmp	.+12     	; 0x36c <Lcd4_Port+0x40>
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	83 e2       	ldi	r24, 0x23	; 35
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 36c:	c2 ff       	sbrs	r28, 2
 36e:	07 c0       	rjmp	.+14     	; 0x37e <Lcd4_Port+0x52>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8d e0       	ldi	r24, 0x0D	; 13
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 37c:	06 c0       	rjmp	.+12     	; 0x38a <Lcd4_Port+0x5e>
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	8d e0       	ldi	r24, 0x0D	; 13
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 38a:	c3 ff       	sbrs	r28, 3
 38c:	07 c0       	rjmp	.+14     	; 0x39c <Lcd4_Port+0x70>
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	85 e2       	ldi	r24, 0x25	; 37
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <Lcd4_Port+0x7c>
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	85 e2       	ldi	r24, 0x25	; 37
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <Lcd4_Cmd>:
 3ac:	cf 93       	push	r28
 3ae:	c8 2f       	mov	r28, r24
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd4_Port>
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	8c e0       	ldi	r24, 0x0C	; 12
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <Lcd4_Cmd+0x26>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <Lcd4_Cmd+0x2c>
 3d8:	00 00       	nop
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	8c e0       	ldi	r24, 0x0C	; 12
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 3e6:	8f e9       	ldi	r24, 0x9F	; 159
 3e8:	9f e0       	ldi	r25, 0x0F	; 15
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <Lcd4_Cmd+0x3e>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <Lcd4_Cmd+0x44>
 3f0:	00 00       	nop
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <Lcd4_Clear>:
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 402:	08 95       	ret

00000404 <Lcd4_Set_Cursor>:
 404:	cf 93       	push	r28
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	61 f4       	brne	.+24     	; 0x422 <Lcd4_Set_Cursor+0x1e>
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	86 0f       	add	r24, r22
 40e:	c6 2f       	mov	r28, r22
 410:	cf 70       	andi	r28, 0x0F	; 15
 412:	82 95       	swap	r24
 414:	8f 70       	andi	r24, 0x0F	; 15
 416:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 41a:	8c 2f       	mov	r24, r28
 41c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 420:	0d c0       	rjmp	.+26     	; 0x43c <Lcd4_Set_Cursor+0x38>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	59 f4       	brne	.+22     	; 0x43c <Lcd4_Set_Cursor+0x38>
 426:	80 ec       	ldi	r24, 0xC0	; 192
 428:	86 0f       	add	r24, r22
 42a:	c6 2f       	mov	r28, r22
 42c:	cf 70       	andi	r28, 0x0F	; 15
 42e:	82 95       	swap	r24
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 436:	8c 2f       	mov	r24, r28
 438:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <Lcd4_Init>:
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd4_Port>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	89 ef       	ldi	r24, 0xF9	; 249
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <Lcd4_Init+0xc>
 454:	00 c0       	rjmp	.+0      	; 0x456 <Lcd4_Init+0x16>
 456:	00 00       	nop
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 45e:	8f e1       	ldi	r24, 0x1F	; 31
 460:	9e e4       	ldi	r25, 0x4E	; 78
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <Lcd4_Init+0x22>
 466:	00 c0       	rjmp	.+0      	; 0x468 <Lcd4_Init+0x28>
 468:	00 00       	nop
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 470:	8f ed       	ldi	r24, 0xDF	; 223
 472:	9b ea       	ldi	r25, 0xAB	; 171
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <Lcd4_Init+0x34>
 478:	00 c0       	rjmp	.+0      	; 0x47a <Lcd4_Init+0x3a>
 47a:	00 00       	nop
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 48e:	88 e0       	ldi	r24, 0x08	; 8
 490:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 4a6:	86 e0       	ldi	r24, 0x06	; 6
 4a8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Lcd4_Cmd>
 4ac:	08 95       	ret

000004ae <Lcd4_Write_Char>:
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	d8 2f       	mov	r29, r24
 4b4:	df 70       	andi	r29, 0x0F	; 15
 4b6:	c8 2f       	mov	r28, r24
 4b8:	c0 7f       	andi	r28, 0xF0	; 240
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 4c6:	8c 2f       	mov	r24, r28
 4c8:	82 95       	swap	r24
 4ca:	8f 70       	andi	r24, 0x0F	; 15
 4cc:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd4_Port>
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 4dc:	8f e9       	ldi	r24, 0x9F	; 159
 4de:	9f e0       	ldi	r25, 0x0F	; 15
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <Lcd4_Write_Char+0x32>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <Lcd4_Write_Char+0x38>
 4e6:	00 00       	nop
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	8c e0       	ldi	r24, 0x0C	; 12
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <Lcd4_Write_Char+0x4a>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <Lcd4_Write_Char+0x50>
 4fe:	00 00       	nop
 500:	8d 2f       	mov	r24, r29
 502:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd4_Port>
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 512:	8f e9       	ldi	r24, 0x9F	; 159
 514:	9f e0       	ldi	r25, 0x0F	; 15
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <Lcd4_Write_Char+0x68>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <Lcd4_Write_Char+0x6e>
 51c:	00 00       	nop
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	8c e0       	ldi	r24, 0x0C	; 12
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 52 00 	call	0xa4	; 0xa4 <pinChange>
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <Lcd4_Write_Char+0x80>
 532:	00 c0       	rjmp	.+0      	; 0x534 <Lcd4_Write_Char+0x86>
 534:	00 00       	nop
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <Lcd4_Write_String>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	8c 01       	movw	r16, r24
 546:	c0 e0       	ldi	r28, 0x00	; 0
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	03 c0       	rjmp	.+6      	; 0x552 <Lcd4_Write_String+0x16>
 54c:	0e 94 57 02 	call	0x4ae	; 0x4ae <Lcd4_Write_Char>
 550:	21 96       	adiw	r28, 0x01	; 1
 552:	f8 01       	movw	r30, r16
 554:	ec 0f       	add	r30, r28
 556:	fd 1f       	adc	r31, r29
 558:	80 81       	ld	r24, Z
 55a:	81 11       	cpse	r24, r1
 55c:	f7 cf       	rjmp	.-18     	; 0x54c <Lcd4_Write_String+0x10>
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <USART_init>:
 568:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 56c:	87 e6       	ldi	r24, 0x67	; 103
 56e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 572:	88 e1       	ldi	r24, 0x18	; 24
 574:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 57e:	08 95       	ret

00000580 <USART_send>:
 580:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 584:	95 ff       	sbrs	r25, 5
 586:	fc cf       	rjmp	.-8      	; 0x580 <USART_send>
 588:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 58c:	08 95       	ret

0000058e <USART_receive>:
 58e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 592:	88 23       	and	r24, r24
 594:	e4 f7       	brge	.-8      	; 0x58e <USART_receive>
 596:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 59a:	08 95       	ret

0000059c <get_length>:
 59c:	fc 01       	movw	r30, r24
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <get_length+0xc>
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	fa 01       	movw	r30, r20
 5a8:	af 01       	movw	r20, r30
 5aa:	4f 5f       	subi	r20, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	20 81       	ld	r18, Z
 5b0:	21 11       	cpse	r18, r1
 5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <get_length+0x8>
 5b4:	08 95       	ret

000005b6 <USART_putstring>:
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	7c 01       	movw	r14, r24
 5c4:	0e 94 ce 02 	call	0x59c	; 0x59c <get_length>
 5c8:	8c 01       	movw	r16, r24
 5ca:	c0 e0       	ldi	r28, 0x00	; 0
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <USART_putstring+0x2a>
 5d0:	f7 01       	movw	r30, r14
 5d2:	ec 0f       	add	r30, r28
 5d4:	fd 1f       	adc	r31, r29
 5d6:	80 81       	ld	r24, Z
 5d8:	81 11       	cpse	r24, r1
 5da:	0e 94 c0 02 	call	0x580	; 0x580 <USART_send>
 5de:	21 96       	adiw	r28, 0x01	; 1
 5e0:	c0 17       	cp	r28, r16
 5e2:	d1 07       	cpc	r29, r17
 5e4:	ac f3       	brlt	.-22     	; 0x5d0 <USART_putstring+0x1a>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	08 95       	ret

000005f4 <delaym>:
 5f4:	8a e7       	ldi	r24, 0x7A	; 122
 5f6:	91 ee       	ldi	r25, 0xE1	; 225
 5f8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 5fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 600:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 604:	84 e0       	ldi	r24, 0x04	; 4
 606:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 60a:	b0 9b       	sbis	0x16, 0	; 22
 60c:	fe cf       	rjmp	.-4      	; 0x60a <delaym+0x16>
 60e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	86 bb       	out	0x16, r24	; 22
 616:	08 95       	ret

00000618 <initADC>:
 618:	ec e7       	ldi	r30, 0x7C	; 124
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	81 64       	ori	r24, 0x41	; 65
 620:	80 83       	st	Z, r24
 622:	ea e7       	ldi	r30, 0x7A	; 122
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	83 60       	ori	r24, 0x03	; 3
 62a:	80 83       	st	Z, r24
 62c:	80 81       	ld	r24, Z
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	80 83       	st	Z, r24
 632:	08 95       	ret

00000634 <direction>:
 634:	1d 9b       	sbis	0x03, 5	; 3
 636:	07 c0       	rjmp	.+14     	; 0x646 <direction+0x12>
 638:	85 b1       	in	r24, 0x05	; 5
 63a:	8f 7d       	andi	r24, 0xDF	; 223
 63c:	85 b9       	out	0x05, r24	; 5
 63e:	85 b1       	in	r24, 0x05	; 5
 640:	80 61       	ori	r24, 0x10	; 16
 642:	85 b9       	out	0x05, r24	; 5
 644:	08 c0       	rjmp	.+16     	; 0x656 <direction+0x22>
 646:	1c 9b       	sbis	0x03, 4	; 3
 648:	06 c0       	rjmp	.+12     	; 0x656 <direction+0x22>
 64a:	85 b1       	in	r24, 0x05	; 5
 64c:	8f 7e       	andi	r24, 0xEF	; 239
 64e:	85 b9       	out	0x05, r24	; 5
 650:	85 b1       	in	r24, 0x05	; 5
 652:	80 62       	ori	r24, 0x20	; 32
 654:	85 b9       	out	0x05, r24	; 5
 656:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
 65a:	08 95       	ret

0000065c <delays1>:
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0a c0       	rjmp	.+20     	; 0x676 <delays1+0x1a>
 662:	16 bc       	out	0x26, r1	; 38
 664:	14 bc       	out	0x24, r1	; 36
 666:	25 e0       	ldi	r18, 0x05	; 5
 668:	25 bd       	out	0x25, r18	; 37
 66a:	a8 9b       	sbis	0x15, 0	; 21
 66c:	fe cf       	rjmp	.-4      	; 0x66a <delays1+0xe>
 66e:	15 bc       	out	0x25, r1	; 37
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	25 bb       	out	0x15, r18	; 21
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	8d 33       	cpi	r24, 0x3D	; 61
 678:	91 05       	cpc	r25, r1
 67a:	99 f7       	brne	.-26     	; 0x662 <delays1+0x6>
 67c:	08 95       	ret

0000067e <main>:
//---------------------------------------servo sub function

int main()
{

DDRD=0xFF;// Set all output
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	8a b9       	out	0x0a, r24	; 10
DDRB=0xFF;// Set all output
 682:	84 b9       	out	0x04, r24	; 4
PORTB = 0x00;// Set all low
 684:	15 b8       	out	0x05, r1	; 5
PORTD = 0x00;// Set all low
 686:	1b b8       	out	0x0b, r1	; 11
TCCR0A=0xc3;// Use fast PWM mode with inverting mode
 688:	93 ec       	ldi	r25, 0xC3	; 195
 68a:	94 bd       	out	0x24, r25	; 36
TCCR0B=0x05;// use timer0 with 1024 prescaler
 68c:	95 e0       	ldi	r25, 0x05	; 5
 68e:	95 bd       	out	0x25, r25	; 37
OCR0A=0xFF;//OCR0A=0xFF=255
 690:	87 bd       	out	0x27, r24	; 39
		
Lcd4_Init();//initialization of LCD using 8-bit mode
 692:	0e 94 20 02 	call	0x440	; 0x440 <Lcd4_Init>
Lcd4_Clear();         //clean LCD
 696:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
USART_init();// Initialize USART
 69a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_init>
char string[255]="Wait ";//The first letters to appear
Lcd4_Set_Cursor(1,0);//set cursor at row 1 and column 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 02 02 	call	0x404	; 0x404 <Lcd4_Set_Cursor>
Lcd4_Write_String("ModeD!");// display string on LCD
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
USART_putstring("Welcome to use\n");//display on terminal
 6ae:	8c e0       	ldi	r24, 0x0C	; 12
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <USART_putstring>

	while (1)//wait here
	{	
		USART_init();//USART initialization	
 6b6:	0e 94 b4 02 	call	0x568	; 0x568 <USART_init>
		rec=USART_receive();
 6ba:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_receive>
 6be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rec>
		Lcd4_Init();//initialization of LCD using 4-bit mode
 6c2:	0e 94 20 02 	call	0x440	; 0x440 <Lcd4_Init>
		
		if(rec == 'A'){//ModeA
 6c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rec>
 6ca:	81 34       	cpi	r24, 0x41	; 65
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0x52>
 6ce:	c6 c0       	rjmp	.+396    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			Lcd4_Clear();         //clean LCD
 6d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
			Lcd4_Init();//initialization of LCD using 4-bit mode
 6d4:	0e 94 20 02 	call	0x440	; 0x440 <Lcd4_Init>
			Lcd4_Set_Cursor(1,3);//set cursor at row 1 and column 3
 6d8:	63 e0       	ldi	r22, 0x03	; 3
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 02 02 	call	0x404	; 0x404 <Lcd4_Set_Cursor>
			Lcd4_Write_String("ModeA!");// display string on LCD
 6e0:	8c e1       	ldi	r24, 0x1C	; 28
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
			USART_putstring("In modeA\n");//display on terminal
 6e8:	83 e2       	ldi	r24, 0x23	; 35
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 db 02 	call	0x5b6	; 0x5b6 <USART_putstring>
			
			DDRD &=~(1<<2);// Set PD2 input
 6f0:	8a b1       	in	r24, 0x0a	; 10
 6f2:	8b 7f       	andi	r24, 0xFB	; 251
 6f4:	8a b9       	out	0x0a, r24	; 10
			DDRD &=~(1<<3);// Set PD3 input
 6f6:	8a b1       	in	r24, 0x0a	; 10
 6f8:	87 7f       	andi	r24, 0xF7	; 247
 6fa:	8a b9       	out	0x0a, r24	; 10
			DDRC|=(1<<3)|(1<<4)|(1<<5);// Set PC3 PC4 PC5 output
 6fc:	87 b1       	in	r24, 0x07	; 7
 6fe:	88 63       	ori	r24, 0x38	; 56
 700:	87 b9       	out	0x07, r24	; 7
			PORTB|=(1<<5);//PB5=1 to control direction of motor
 702:	85 b1       	in	r24, 0x05	; 5
 704:	80 62       	ori	r24, 0x20	; 32
 706:	85 b9       	out	0x05, r24	; 5
			PORTB|=(1<<2);//PB2=1
 708:	85 b1       	in	r24, 0x05	; 5
 70a:	84 60       	ori	r24, 0x04	; 4
 70c:	85 b9       	out	0x05, r24	; 5
			
			TCCR0A=0x83;// Use fast PWM mode with inverting mode
 70e:	83 e8       	ldi	r24, 0x83	; 131
 710:	84 bd       	out	0x24, r24	; 36
			TCCR0B=0x05;// use timer0 with 1024 prescaler
 712:	85 e0       	ldi	r24, 0x05	; 5
 714:	85 bd       	out	0x25, r24	; 37
			uint16_t pValue;
			int value;
			initADC();//function initADC()
 716:	0e 94 0c 03 	call	0x618	; 0x618 <initADC>
			int c=0;//initialize c
			while(1){
					if((PIND&0x08)==0x08){// Quit
 71a:	4b 9b       	sbis	0x09, 3	; 9
 71c:	19 c0       	rjmp	.+50     	; 0x750 <main+0xd2>
					Lcd4_Clear();         //clean LCD
 71e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					USART_putstring("Quit\n");//display on terminal
 722:	8d e2       	ldi	r24, 0x2D	; 45
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 db 02 	call	0x5b6	; 0x5b6 <USART_putstring>
					PORTC &=~(1<<4);//PC3 PC4 PC5 as 0
 72a:	88 b1       	in	r24, 0x08	; 8
 72c:	8f 7e       	andi	r24, 0xEF	; 239
 72e:	88 b9       	out	0x08, r24	; 8
					PORTC &=~(1<<5);
 730:	88 b1       	in	r24, 0x08	; 8
 732:	8f 7d       	andi	r24, 0xDF	; 223
 734:	88 b9       	out	0x08, r24	; 8
					PORTC &=~(1<<3);
 736:	88 b1       	in	r24, 0x08	; 8
 738:	87 7f       	andi	r24, 0xF7	; 247
 73a:	88 b9       	out	0x08, r24	; 8
					OCR0A = 0;//OCR0A=0 stop motor
 73c:	17 bc       	out	0x27, r1	; 39
					Lcd4_Set_Cursor(1,0);//set cursor at row 1 and column 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	0e 94 02 02 	call	0x404	; 0x404 <Lcd4_Set_Cursor>
					Lcd4_Write_String("Welcome!");// display string on LCD
 746:	83 e3       	ldi	r24, 0x33	; 51
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
					break;
 74e:	86 c0       	rjmp	.+268    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
					}
					ADCSRA |= (1 << ADSC); //art ADC conversion
 750:	ea e7       	ldi	r30, 0x7A	; 122
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	80 64       	ori	r24, 0x40	; 64
 758:	80 83       	st	Z, r24
					while((ADCSRA & (1 << ADSC))); //wait until ADSC bit is clear, i.e., ADC conversion is done
 75a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 75e:	86 fd       	sbrc	r24, 6
 760:	fc cf       	rjmp	.-8      	; 0x75a <main+0xdc>
					uint8_t theLowADC = ADCL;//the low value is in ADCL register
 762:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
					pValue = ADCH << 8 | theLowADC;//the high value is in ADCH register
 766:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	98 2f       	mov	r25, r24
 76e:	88 27       	eor	r24, r24
 770:	82 2b       	or	r24, r18
					value = pValue/4;//make value in the range of about 0-255
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
					if (value > 255) {
 77a:	8f 3f       	cpi	r24, 0xFF	; 255
 77c:	91 05       	cpc	r25, r1
 77e:	21 f0       	breq	.+8      	; 0x788 <main+0x10a>
 780:	1c f0       	brlt	.+6      	; 0x788 <main+0x10a>
						OCR0A = 255;//if OCR0A overflow make it equal to 255
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	87 bd       	out	0x27, r24	; 39
 786:	01 c0       	rjmp	.+2      	; 0x78a <main+0x10c>
					else if (value < 0)
					{
						OCR0A = 0;//if OCR0A is negative make it equal to 0
					}
					else {
						OCR0A = value;//else make it equal to ADC value
 788:	87 bd       	out	0x27, r24	; 39
					}
					if((PIND&0x04)!=0x04){
 78a:	4a 9b       	sbis	0x09, 2	; 9
						direction();
 78c:	0e 94 1a 03 	call	0x634	; 0x634 <direction>
					}
					delaym();//delay 0.5s to prevent error caused by key jitter
 790:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
					
					//srand ();
					c=1+rand()%6;//get random number
 794:	0e 94 85 05 	call	0xb0a	; 0xb0a <rand>
 798:	66 e0       	ldi	r22, 0x06	; 6
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	0e 94 0b 05 	call	0xa16	; 0xa16 <__divmodhi4>
					switch (c)//select laser case
 7a0:	fc 01       	movw	r30, r24
 7a2:	31 96       	adiw	r30, 0x01	; 1
 7a4:	e7 30       	cpi	r30, 0x07	; 7
 7a6:	f1 05       	cpc	r31, r1
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <main+0x12e>
 7aa:	b7 cf       	rjmp	.-146    	; 0x71a <main+0x9c>
 7ac:	ec 5c       	subi	r30, 0xCC	; 204
 7ae:	ff 4f       	sbci	r31, 0xFF	; 255
 7b0:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__tablejump2__>
					{
						
						case 0:{
							PORTC|=(1<<4);
 7b4:	88 b1       	in	r24, 0x08	; 8
 7b6:	80 61       	ori	r24, 0x10	; 16
 7b8:	88 b9       	out	0x08, r24	; 8
							PORTC &=~(1<<5);
 7ba:	88 b1       	in	r24, 0x08	; 8
 7bc:	8f 7d       	andi	r24, 0xDF	; 223
 7be:	88 b9       	out	0x08, r24	; 8
							PORTC &=~(1<<3);
 7c0:	88 b1       	in	r24, 0x08	; 8
 7c2:	87 7f       	andi	r24, 0xF7	; 247
 7c4:	88 b9       	out	0x08, r24	; 8
							delaym();
 7c6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 7ca:	a7 cf       	rjmp	.-178    	; 0x71a <main+0x9c>
						}
						case 1:{
							PORTC&=~(1<<4);
 7cc:	88 b1       	in	r24, 0x08	; 8
 7ce:	8f 7e       	andi	r24, 0xEF	; 239
 7d0:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<5);
 7d2:	88 b1       	in	r24, 0x08	; 8
 7d4:	80 62       	ori	r24, 0x20	; 32
 7d6:	88 b9       	out	0x08, r24	; 8
							PORTC &=~(1<<3);
 7d8:	88 b1       	in	r24, 0x08	; 8
 7da:	87 7f       	andi	r24, 0xF7	; 247
 7dc:	88 b9       	out	0x08, r24	; 8
							delaym();
 7de:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 7e2:	9b cf       	rjmp	.-202    	; 0x71a <main+0x9c>
						}
						case 2:{
							PORTC&=~(1<<4);
 7e4:	88 b1       	in	r24, 0x08	; 8
 7e6:	8f 7e       	andi	r24, 0xEF	; 239
 7e8:	88 b9       	out	0x08, r24	; 8
							PORTC&=~(1<<5);
 7ea:	88 b1       	in	r24, 0x08	; 8
 7ec:	8f 7d       	andi	r24, 0xDF	; 223
 7ee:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<3);
 7f0:	88 b1       	in	r24, 0x08	; 8
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	88 b9       	out	0x08, r24	; 8
							delaym();
 7f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 7fa:	8f cf       	rjmp	.-226    	; 0x71a <main+0x9c>
						}
						case 3:{
							PORTC&=~(1<<4);
 7fc:	88 b1       	in	r24, 0x08	; 8
 7fe:	8f 7e       	andi	r24, 0xEF	; 239
 800:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<5);
 802:	88 b1       	in	r24, 0x08	; 8
 804:	80 62       	ori	r24, 0x20	; 32
 806:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<3);
 808:	88 b1       	in	r24, 0x08	; 8
 80a:	88 60       	ori	r24, 0x08	; 8
 80c:	88 b9       	out	0x08, r24	; 8
							delaym();
 80e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 812:	83 cf       	rjmp	.-250    	; 0x71a <main+0x9c>
						}
						case 4:{
							PORTC|=(1<<4);
 814:	88 b1       	in	r24, 0x08	; 8
 816:	80 61       	ori	r24, 0x10	; 16
 818:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<5);
 81a:	88 b1       	in	r24, 0x08	; 8
 81c:	80 62       	ori	r24, 0x20	; 32
 81e:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<3);
 820:	88 b1       	in	r24, 0x08	; 8
 822:	88 60       	ori	r24, 0x08	; 8
 824:	88 b9       	out	0x08, r24	; 8
							delaym();
 826:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 82a:	77 cf       	rjmp	.-274    	; 0x71a <main+0x9c>
						}
						case 5:{
							PORTC|=(1<<4);
 82c:	88 b1       	in	r24, 0x08	; 8
 82e:	80 61       	ori	r24, 0x10	; 16
 830:	88 b9       	out	0x08, r24	; 8
							PORTC &=~(1<<5);
 832:	88 b1       	in	r24, 0x08	; 8
 834:	8f 7d       	andi	r24, 0xDF	; 223
 836:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<3);
 838:	88 b1       	in	r24, 0x08	; 8
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	88 b9       	out	0x08, r24	; 8
							delaym();
 83e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 842:	6b cf       	rjmp	.-298    	; 0x71a <main+0x9c>
						}
						case 6:{
							PORTC|=(1<<4);
 844:	88 b1       	in	r24, 0x08	; 8
 846:	80 61       	ori	r24, 0x10	; 16
 848:	88 b9       	out	0x08, r24	; 8
							PORTC|=(1<<5);
 84a:	88 b1       	in	r24, 0x08	; 8
 84c:	80 62       	ori	r24, 0x20	; 32
 84e:	88 b9       	out	0x08, r24	; 8
							PORTC &=~(1<<3);
 850:	88 b1       	in	r24, 0x08	; 8
 852:	87 7f       	andi	r24, 0xF7	; 247
 854:	88 b9       	out	0x08, r24	; 8
							delaym();
 856:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <delaym>
							break;//jump out of switch
 85a:	5f cf       	rjmp	.-322    	; 0x71a <main+0x9c>
						}
					}
				}
			}
			
		if(rec == 'B'){//ModeB
 85c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rec>
 860:	82 34       	cpi	r24, 0x42	; 66
 862:	09 f0       	breq	.+2      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 864:	28 cf       	rjmp	.-432    	; 0x6b6 <main+0x38>
			DDRD &=~(1<<2);//PD2 PD3 input
 866:	8a b1       	in	r24, 0x0a	; 10
 868:	8b 7f       	andi	r24, 0xFB	; 251
 86a:	8a b9       	out	0x0a, r24	; 10
			DDRD &=~(1<<3);
 86c:	8a b1       	in	r24, 0x0a	; 10
 86e:	87 7f       	andi	r24, 0xF7	; 247
 870:	8a b9       	out	0x0a, r24	; 10
			PORTB|=(1<<2);//PB2 high
 872:	85 b1       	in	r24, 0x05	; 5
 874:	84 60       	ori	r24, 0x04	; 4
 876:	85 b9       	out	0x05, r24	; 5

			Lcd4_Clear();         //clean LCD
 878:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
			Lcd4_Init();//initialization of LCD using 4-bit mode
 87c:	0e 94 20 02 	call	0x440	; 0x440 <Lcd4_Init>
			Lcd4_Set_Cursor(1,3);//set cursor at row 1 and column 3
 880:	63 e0       	ldi	r22, 0x03	; 3
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	0e 94 02 02 	call	0x404	; 0x404 <Lcd4_Set_Cursor>
			Lcd4_Write_String("ModeB!");// display string on LCD
 888:	8c e3       	ldi	r24, 0x3C	; 60
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
			USART_putstring("In modeB\n");//display on terminal
 890:	83 e4       	ldi	r24, 0x43	; 67
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 db 02 	call	0x5b6	; 0x5b6 <USART_putstring>
			delays1();//delay for 2s
 898:	0e 94 2e 03 	call	0x65c	; 0x65c <delays1>
			Lcd4_Clear();         //clean LCD
 89c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
			Lcd4_Write_String("Set time");// display string on LCD
 8a0:	8d e4       	ldi	r24, 0x4D	; 77
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
			TCCR1A |= (1 << WGM11) | (1 << COM1A1);//set fast pwm 14 mode with non-inverting mode
 8a8:	e0 e8       	ldi	r30, 0x80	; 128
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	82 68       	ori	r24, 0x82	; 130
 8b0:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM13) | (1 << WGM12) |(1 << CS11);//set pre-scale of 8 cs11
 8b2:	e1 e8       	ldi	r30, 0x81	; 129
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	8a 61       	ori	r24, 0x1A	; 26
 8ba:	80 83       	st	Z, r24
			ICR1 = 40000; //set icr1max = 40000 icr1 is the top defining pwm period
 8bc:	80 e4       	ldi	r24, 0x40	; 64
 8be:	9c e9       	ldi	r25, 0x9C	; 156
 8c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 8c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
			int c=0;
 8c8:	c0 e0       	ldi	r28, 0x00	; 0
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
			while(1){//duty cycle need offset to correct
			if((PIND&0x04)!=0x04){//set time
 8cc:	4a 99       	sbic	0x09, 2	; 9
 8ce:	0f c0       	rjmp	.+30     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
				c=c+1;
 8d0:	21 96       	adiw	r28, 0x01	; 1
				if(c>4){
 8d2:	c5 30       	cpi	r28, 0x05	; 5
 8d4:	d1 05       	cpc	r29, r1
 8d6:	14 f0       	brlt	.+4      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
					c=0;
 8d8:	c0 e0       	ldi	r28, 0x00	; 0
 8da:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8dc:	2f ef       	ldi	r18, 0xFF	; 255
 8de:	80 e7       	ldi	r24, 0x70	; 112
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	21 50       	subi	r18, 0x01	; 1
 8e4:	80 40       	sbci	r24, 0x00	; 0
 8e6:	90 40       	sbci	r25, 0x00	; 0
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8ec:	00 00       	nop
				}
			_delay_ms(50);//Avoid error
			}
			switch (c){
 8ee:	c2 30       	cpi	r28, 0x02	; 2
 8f0:	d1 05       	cpc	r29, r1
 8f2:	79 f1       	breq	.+94     	; 0x952 <__stack+0x53>
 8f4:	34 f4       	brge	.+12     	; 0x902 <__stack+0x3>
 8f6:	20 97       	sbiw	r28, 0x00	; 0
 8f8:	61 f0       	breq	.+24     	; 0x912 <__stack+0x13>
 8fa:	c1 30       	cpi	r28, 0x01	; 1
 8fc:	d1 05       	cpc	r29, r1
 8fe:	c9 f0       	breq	.+50     	; 0x932 <__stack+0x33>
 900:	e5 cf       	rjmp	.-54     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 902:	c3 30       	cpi	r28, 0x03	; 3
 904:	d1 05       	cpc	r29, r1
 906:	a9 f1       	breq	.+106    	; 0x972 <__stack+0x73>
 908:	c4 30       	cpi	r28, 0x04	; 4
 90a:	d1 05       	cpc	r29, r1
 90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
 90e:	41 c0       	rjmp	.+130    	; 0x992 <__stack+0x93>
 910:	dd cf       	rjmp	.-70     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
				case 0:{
					Lcd4_Clear();         //clean LCD
 912:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					Lcd4_Write_String("Set time");// display string on LCD
 916:	8d e4       	ldi	r24, 0x4D	; 77
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	89 e6       	ldi	r24, 0x69	; 105
 922:	98 e1       	ldi	r25, 0x18	; 24
 924:	21 50       	subi	r18, 0x01	; 1
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
 92e:	00 00       	nop
 930:	cd cf       	rjmp	.-102    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
					_delay_ms(500);
					break;//jump out of switch
				}
				case 1:{
					Lcd4_Clear();         //clean LCD
 932:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					Lcd4_Write_String("Set one hour");// display string on LCD
 936:	86 e5       	ldi	r24, 0x56	; 86
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
 93e:	2f ef       	ldi	r18, 0xFF	; 255
 940:	89 e6       	ldi	r24, 0x69	; 105
 942:	98 e1       	ldi	r25, 0x18	; 24
 944:	21 50       	subi	r18, 0x01	; 1
 946:	80 40       	sbci	r24, 0x00	; 0
 948:	90 40       	sbci	r25, 0x00	; 0
 94a:	e1 f7       	brne	.-8      	; 0x944 <__stack+0x45>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <__stack+0x4f>
 94e:	00 00       	nop
 950:	bd cf       	rjmp	.-134    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
					_delay_ms(500);
					break;//jump out of switch
				}
				case 2:{
					Lcd4_Clear();         //clean LCD
 952:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					Lcd4_Write_String("Set two hours");// display string on LCD
 956:	83 e6       	ldi	r24, 0x63	; 99
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
 95e:	2f ef       	ldi	r18, 0xFF	; 255
 960:	89 e6       	ldi	r24, 0x69	; 105
 962:	98 e1       	ldi	r25, 0x18	; 24
 964:	21 50       	subi	r18, 0x01	; 1
 966:	80 40       	sbci	r24, 0x00	; 0
 968:	90 40       	sbci	r25, 0x00	; 0
 96a:	e1 f7       	brne	.-8      	; 0x964 <__stack+0x65>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <__stack+0x6f>
 96e:	00 00       	nop
 970:	ad cf       	rjmp	.-166    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
					_delay_ms(500);
					break;//jump out of switch
				}
				case 3:{
					Lcd4_Clear();         //clean LCD
 972:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					Lcd4_Write_String("Set three hours");// display string on LCD
 976:	81 e7       	ldi	r24, 0x71	; 113
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
 97e:	2f ef       	ldi	r18, 0xFF	; 255
 980:	89 e6       	ldi	r24, 0x69	; 105
 982:	98 e1       	ldi	r25, 0x18	; 24
 984:	21 50       	subi	r18, 0x01	; 1
 986:	80 40       	sbci	r24, 0x00	; 0
 988:	90 40       	sbci	r25, 0x00	; 0
 98a:	e1 f7       	brne	.-8      	; 0x984 <__stack+0x85>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <__stack+0x8f>
 98e:	00 00       	nop
 990:	9d cf       	rjmp	.-198    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
					_delay_ms(500);
					break;//jump out of switch
				}
				case 4:{
					Lcd4_Clear();         //clean LCD
 992:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
					Lcd4_Write_String("Set four hours");// display string on LCD
 996:	81 e8       	ldi	r24, 0x81	; 129
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
 99e:	2f ef       	ldi	r18, 0xFF	; 255
 9a0:	89 e6       	ldi	r24, 0x69	; 105
 9a2:	98 e1       	ldi	r25, 0x18	; 24
 9a4:	21 50       	subi	r18, 0x01	; 1
 9a6:	80 40       	sbci	r24, 0x00	; 0
 9a8:	90 40       	sbci	r25, 0x00	; 0
 9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0xa5>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0xaf>
 9ae:	00 00       	nop
 9b0:	8d cf       	rjmp	.-230    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>

000009b2 <__vector_1>:
		}
	return 0;
}

ISR (INT0_vect) //ISR for external interrupt 0
{
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	2f 93       	push	r18
 9be:	3f 93       	push	r19
 9c0:	4f 93       	push	r20
 9c2:	5f 93       	push	r21
 9c4:	6f 93       	push	r22
 9c6:	7f 93       	push	r23
 9c8:	8f 93       	push	r24
 9ca:	9f 93       	push	r25
 9cc:	af 93       	push	r26
 9ce:	bf 93       	push	r27
 9d0:	ef 93       	push	r30
 9d2:	ff 93       	push	r31
						Lcd4_Clear();//Clear LCD
 9d4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Clear>
						USART_putstring("Quit\n");//display on terminal
 9d8:	8d e2       	ldi	r24, 0x2D	; 45
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <USART_putstring>
						Lcd4_Set_Cursor(1,0);//set cursor at row 1 and column 0
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	0e 94 02 02 	call	0x404	; 0x404 <Lcd4_Set_Cursor>
						Lcd4_Write_String("Welcome!");// display string on LCD
 9e8:	83 e3       	ldi	r24, 0x33	; 51
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd4_Write_String>
						delays1();//delay 1s
 9f0:	0e 94 2e 03 	call	0x65c	; 0x65c <delays1>
}
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <__divmodhi4>:
 a16:	97 fb       	bst	r25, 7
 a18:	07 2e       	mov	r0, r23
 a1a:	16 f4       	brtc	.+4      	; 0xa20 <__divmodhi4+0xa>
 a1c:	00 94       	com	r0
 a1e:	07 d0       	rcall	.+14     	; 0xa2e <__divmodhi4_neg1>
 a20:	77 fd       	sbrc	r23, 7
 a22:	09 d0       	rcall	.+18     	; 0xa36 <__divmodhi4_neg2>
 a24:	0e 94 25 05 	call	0xa4a	; 0xa4a <__udivmodhi4>
 a28:	07 fc       	sbrc	r0, 7
 a2a:	05 d0       	rcall	.+10     	; 0xa36 <__divmodhi4_neg2>
 a2c:	3e f4       	brtc	.+14     	; 0xa3c <__divmodhi4_exit>

00000a2e <__divmodhi4_neg1>:
 a2e:	90 95       	com	r25
 a30:	81 95       	neg	r24
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	08 95       	ret

00000a36 <__divmodhi4_neg2>:
 a36:	70 95       	com	r23
 a38:	61 95       	neg	r22
 a3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000a3c <__divmodhi4_exit>:
 a3c:	08 95       	ret

00000a3e <__tablejump2__>:
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	05 90       	lpm	r0, Z+
 a44:	f4 91       	lpm	r31, Z
 a46:	e0 2d       	mov	r30, r0
 a48:	09 94       	ijmp

00000a4a <__udivmodhi4>:
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	51 e1       	ldi	r21, 0x11	; 17
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <__udivmodhi4_ep>

00000a52 <__udivmodhi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	a6 17       	cp	r26, r22
 a58:	b7 07       	cpc	r27, r23
 a5a:	10 f0       	brcs	.+4      	; 0xa60 <__udivmodhi4_ep>
 a5c:	a6 1b       	sub	r26, r22
 a5e:	b7 0b       	sbc	r27, r23

00000a60 <__udivmodhi4_ep>:
 a60:	88 1f       	adc	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	5a 95       	dec	r21
 a66:	a9 f7       	brne	.-22     	; 0xa52 <__udivmodhi4_loop>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	bc 01       	movw	r22, r24
 a6e:	cd 01       	movw	r24, r26
 a70:	08 95       	ret

00000a72 <do_rand>:
 a72:	8f 92       	push	r8
 a74:	9f 92       	push	r9
 a76:	af 92       	push	r10
 a78:	bf 92       	push	r11
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	ec 01       	movw	r28, r24
 a88:	68 81       	ld	r22, Y
 a8a:	79 81       	ldd	r23, Y+1	; 0x01
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	61 15       	cp	r22, r1
 a92:	71 05       	cpc	r23, r1
 a94:	81 05       	cpc	r24, r1
 a96:	91 05       	cpc	r25, r1
 a98:	21 f4       	brne	.+8      	; 0xaa2 <do_rand+0x30>
 a9a:	64 e2       	ldi	r22, 0x24	; 36
 a9c:	79 ed       	ldi	r23, 0xD9	; 217
 a9e:	8b e5       	ldi	r24, 0x5B	; 91
 aa0:	97 e0       	ldi	r25, 0x07	; 7
 aa2:	2d e1       	ldi	r18, 0x1D	; 29
 aa4:	33 ef       	ldi	r19, 0xF3	; 243
 aa6:	41 e0       	ldi	r20, 0x01	; 1
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divmodsi4>
 aae:	49 01       	movw	r8, r18
 ab0:	5a 01       	movw	r10, r20
 ab2:	9b 01       	movw	r18, r22
 ab4:	ac 01       	movw	r20, r24
 ab6:	a7 ea       	ldi	r26, 0xA7	; 167
 ab8:	b1 e4       	ldi	r27, 0x41	; 65
 aba:	0e 94 b4 05 	call	0xb68	; 0xb68 <__muluhisi3>
 abe:	6b 01       	movw	r12, r22
 ac0:	7c 01       	movw	r14, r24
 ac2:	ac ee       	ldi	r26, 0xEC	; 236
 ac4:	b4 ef       	ldi	r27, 0xF4	; 244
 ac6:	a5 01       	movw	r20, r10
 ac8:	94 01       	movw	r18, r8
 aca:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulohisi3>
 ace:	dc 01       	movw	r26, r24
 ad0:	cb 01       	movw	r24, r22
 ad2:	8c 0d       	add	r24, r12
 ad4:	9d 1d       	adc	r25, r13
 ad6:	ae 1d       	adc	r26, r14
 ad8:	bf 1d       	adc	r27, r15
 ada:	b7 ff       	sbrs	r27, 7
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <do_rand+0x72>
 ade:	01 97       	sbiw	r24, 0x01	; 1
 ae0:	a1 09       	sbc	r26, r1
 ae2:	b0 48       	sbci	r27, 0x80	; 128
 ae4:	88 83       	st	Y, r24
 ae6:	99 83       	std	Y+1, r25	; 0x01
 ae8:	aa 83       	std	Y+2, r26	; 0x02
 aea:	bb 83       	std	Y+3, r27	; 0x03
 aec:	9f 77       	andi	r25, 0x7F	; 127
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	ff 90       	pop	r15
 af4:	ef 90       	pop	r14
 af6:	df 90       	pop	r13
 af8:	cf 90       	pop	r12
 afa:	bf 90       	pop	r11
 afc:	af 90       	pop	r10
 afe:	9f 90       	pop	r9
 b00:	8f 90       	pop	r8
 b02:	08 95       	ret

00000b04 <rand_r>:
 b04:	0e 94 39 05 	call	0xa72	; 0xa72 <do_rand>
 b08:	08 95       	ret

00000b0a <rand>:
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	91 e0       	ldi	r25, 0x01	; 1
 b0e:	0e 94 39 05 	call	0xa72	; 0xa72 <do_rand>
 b12:	08 95       	ret

00000b14 <srand>:
 b14:	a0 e0       	ldi	r26, 0x00	; 0
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 b1c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b20:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 b24:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 b28:	08 95       	ret

00000b2a <__divmodsi4>:
 b2a:	05 2e       	mov	r0, r21
 b2c:	97 fb       	bst	r25, 7
 b2e:	1e f4       	brtc	.+6      	; 0xb36 <__divmodsi4+0xc>
 b30:	00 94       	com	r0
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__negsi2>
 b36:	57 fd       	sbrc	r21, 7
 b38:	07 d0       	rcall	.+14     	; 0xb48 <__divmodsi4_neg2>
 b3a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodsi4>
 b3e:	07 fc       	sbrc	r0, 7
 b40:	03 d0       	rcall	.+6      	; 0xb48 <__divmodsi4_neg2>
 b42:	4e f4       	brtc	.+18     	; 0xb56 <__divmodsi4_exit>
 b44:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__negsi2>

00000b48 <__divmodsi4_neg2>:
 b48:	50 95       	com	r21
 b4a:	40 95       	com	r20
 b4c:	30 95       	com	r19
 b4e:	21 95       	neg	r18
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	4f 4f       	sbci	r20, 0xFF	; 255
 b54:	5f 4f       	sbci	r21, 0xFF	; 255

00000b56 <__divmodsi4_exit>:
 b56:	08 95       	ret

00000b58 <__negsi2>:
 b58:	90 95       	com	r25
 b5a:	80 95       	com	r24
 b5c:	70 95       	com	r23
 b5e:	61 95       	neg	r22
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	08 95       	ret

00000b68 <__muluhisi3>:
 b68:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__umulhisi3>
 b6c:	a5 9f       	mul	r26, r21
 b6e:	90 0d       	add	r25, r0
 b70:	b4 9f       	mul	r27, r20
 b72:	90 0d       	add	r25, r0
 b74:	a4 9f       	mul	r26, r20
 b76:	80 0d       	add	r24, r0
 b78:	91 1d       	adc	r25, r1
 b7a:	11 24       	eor	r1, r1
 b7c:	08 95       	ret

00000b7e <__mulshisi3>:
 b7e:	b7 ff       	sbrs	r27, 7
 b80:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__muluhisi3>

00000b84 <__mulohisi3>:
 b84:	0e 94 b4 05 	call	0xb68	; 0xb68 <__muluhisi3>
 b88:	82 1b       	sub	r24, r18
 b8a:	93 0b       	sbc	r25, r19
 b8c:	08 95       	ret

00000b8e <__udivmodsi4>:
 b8e:	a1 e2       	ldi	r26, 0x21	; 33
 b90:	1a 2e       	mov	r1, r26
 b92:	aa 1b       	sub	r26, r26
 b94:	bb 1b       	sub	r27, r27
 b96:	fd 01       	movw	r30, r26
 b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__udivmodsi4_ep>

00000b9a <__udivmodsi4_loop>:
 b9a:	aa 1f       	adc	r26, r26
 b9c:	bb 1f       	adc	r27, r27
 b9e:	ee 1f       	adc	r30, r30
 ba0:	ff 1f       	adc	r31, r31
 ba2:	a2 17       	cp	r26, r18
 ba4:	b3 07       	cpc	r27, r19
 ba6:	e4 07       	cpc	r30, r20
 ba8:	f5 07       	cpc	r31, r21
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__udivmodsi4_ep>
 bac:	a2 1b       	sub	r26, r18
 bae:	b3 0b       	sbc	r27, r19
 bb0:	e4 0b       	sbc	r30, r20
 bb2:	f5 0b       	sbc	r31, r21

00000bb4 <__udivmodsi4_ep>:
 bb4:	66 1f       	adc	r22, r22
 bb6:	77 1f       	adc	r23, r23
 bb8:	88 1f       	adc	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	1a 94       	dec	r1
 bbe:	69 f7       	brne	.-38     	; 0xb9a <__udivmodsi4_loop>
 bc0:	60 95       	com	r22
 bc2:	70 95       	com	r23
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	9b 01       	movw	r18, r22
 bca:	ac 01       	movw	r20, r24
 bcc:	bd 01       	movw	r22, r26
 bce:	cf 01       	movw	r24, r30
 bd0:	08 95       	ret

00000bd2 <__umulhisi3>:
 bd2:	a2 9f       	mul	r26, r18
 bd4:	b0 01       	movw	r22, r0
 bd6:	b3 9f       	mul	r27, r19
 bd8:	c0 01       	movw	r24, r0
 bda:	a3 9f       	mul	r26, r19
 bdc:	70 0d       	add	r23, r0
 bde:	81 1d       	adc	r24, r1
 be0:	11 24       	eor	r1, r1
 be2:	91 1d       	adc	r25, r1
 be4:	b2 9f       	mul	r27, r18
 be6:	70 0d       	add	r23, r0
 be8:	81 1d       	adc	r24, r1
 bea:	11 24       	eor	r1, r1
 bec:	91 1d       	adc	r25, r1
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
